{"version":3,"sources":["components/Card.jsx","components/Button.jsx","Todo.js","App.jsx","index.js"],"names":["Card","this","props","title","button","children","className","Component","Button","type","onClick","text","ls","key","obj","localStorage","setItem","JSON","stringify","getItem","parse","todos","updateTodos","Todo","todoTitle","todo","id","Date","time","completed","push","todoId","index","map","x","indexOf","splice","App","state","refreshTodos","setState","GetAll","Swal","fire","input","inputLabel","inputValue","showCancelButton","then","result","isConfirmed","Add","value","length","moment","format","ToggleComplete","Edit","icon","confirmButtonColor","confirmButtonText","cancelButtonColor","cancelButtonText","Remove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.74315742.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Card extends Component {\n    render() {\n        const { title, button, children } = this.props;\n        return (\n            <div className=\"card\">\n                <h5 className=\"card-header d-flex justify-content-between align-items-center\">\n                    {title}\n                    {button}\n                </h5>\n                <div className=\"card-body\">\n                    {children}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\n\nclass Button extends Component {\n    render() {\n        const { type, onClick, text } = this.props;\n        return (\n            <button className={'m-1 btn btn-' + type} onClick={onClick}>{text}</button>\n        );\n    }\n}\n\nexport default Button;\n","function ls(key, obj) {\n    if (obj) {\n        localStorage.setItem(key, JSON.stringify(obj));\n    }\n    if (localStorage.getItem(key) != null) {\n        return JSON.parse(localStorage.getItem(key));\n    } else {\n        return [];\n    }\n}\n\nlet todos = ls(\"todos\") || [];\n\nconst Todo = {\n    \"Add\": function (todoTitle) {\n        if (!todoTitle) {\n            return;\n        }\n        const todo = {\n            id: \"TodoID_\" + new Date() * 1,\n            title: todoTitle,\n            time: new Date(),\n            completed: false\n        }\n        todos.push(todo);\n        updateTodos();\n    },\n    \"Remove\": function (todoId) {\n        const index = todos.map(x => {\n            return x.id;\n        }).indexOf(todoId);\n        todos.splice(index, 1);\n        updateTodos();\n    },\n    \"GetAll\": function () {\n        return ls(\"todos\");\n    },\n    \"Edit\": function (todoId, todoTitle) {\n        const index = todos.map(x => {\n            return x.id;\n        }).indexOf(todoId);\n        if (todoTitle) {\n            todos[index].title = todoTitle;\n        }\n        updateTodos();\n    },\n    \"ToggleComplete\": function (todoId) {\n        const index = todos.map(x => {\n            return x.id;\n        }).indexOf(todoId);\n        todos[index].completed = !todos[index].completed;\n        updateTodos();\n    }\n};\n\nfunction updateTodos() {\n    ls(\"todos\", todos)\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport moment from 'moment';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport Card from './components/Card';\nimport Button from './components/Button';\nimport Todo from './Todo';\nimport Swal from 'sweetalert2';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            todos: []\n        };\n    }\n\n    componentDidMount() {\n        this.refreshTodos();\n    }\n\n    refreshTodos() {\n        this.setState({\n            todos: Todo.GetAll()\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"container mt-3\">\n                <div className=\"row justify-content-md-center\">\n                    <div className=\"col-lg-6 col-md-8 col-sm-12\">\n                        <Card title=\"React Todo List\" button={<Button type=\"success\" onClick={\n                            () => {\n                                Swal.fire({\n                                    title: 'Add New',\n                                    input: 'text',\n                                    inputLabel: 'Add New Todo',\n                                    inputValue: '',\n                                    showCancelButton: true\n                                }).then(result => {\n                                    if (result.isConfirmed) {\n                                        Todo.Add(result.value);\n                                        this.refreshTodos();\n                                    }\n                                });\n                            }\n                        } text=\"Add New\" />}>\n                            <div className=\"list-group list-group-flush\">\n                                {(this.state.todos.length < 1) ? (\n                                    <div>\n                                        <div>Your todo list is empty ‚òÅÔ∏è</div>\n                                        <div>Press the \"Add New\" button to add a new todo üöÄ</div>\n                                    </div>\n                                ) : (this.state.todos.map((todo, key) => (\n                                    <div className=\"list-group-item\" key={key}>\n                                        <div className=\"d-flex w-100 justify-content-between\">\n                                            <h5 className=\"m-1\">\n                                                {\n                                                    todo.completed ? (\n                                                        <del>{todo.title}</del>\n                                                    ) : (\n                                                        <div>{todo.title}</div>\n                                                    )\n                                                }\n                                            </h5>\n                                            <small className=\"m-1\">{moment(todo.time).format(\"YYYY-MM-DD HH:mm:ss\")}</small>\n                                        </div>\n                                        <div className=\"d-flex w-100 justify-content-center\">\n                                            <Button type=\"secondary w-100\" onClick={\n                                                () => {\n                                                    Todo.ToggleComplete(todo.id);\n                                                    this.refreshTodos();\n                                                }\n                                            } text={todo.completed ? \"Set Incomplete\" : \"Set Complete\"} />\n                                            <Button type=\"primary\" onClick={\n                                                () => {\n                                                    Swal.fire({\n                                                        title: 'Edit',\n                                                        input: 'text',\n                                                        inputLabel: todo.title,\n                                                        inputValue: todo.title,\n                                                        showCancelButton: true\n                                                    }).then(result => {\n                                                        if (result.isConfirmed) {\n                                                            Todo.Edit(todo.id, result.value);\n                                                            this.refreshTodos();\n                                                        }\n                                                    });\n                                                }\n                                            } text=\"Edit\" />\n                                            <Button type=\"danger\" onClick={\n                                                () => {\n                                                    Swal.fire({\n                                                        title: 'Are you sure?',\n                                                        icon: 'warning',\n                                                        showCancelButton: true,\n                                                        confirmButtonColor: '#3085d6',\n                                                        confirmButtonText: 'Yes!',\n                                                        cancelButtonColor: '#d33',\n                                                        cancelButtonText: 'No!'\n                                                    }).then((result) => {\n                                                        if (result.isConfirmed) {\n                                                            Todo.Remove(todo.id);\n                                                            this.refreshTodos();\n                                                        }\n                                                    });\n                                                }\n                                            } text=\"Remove\" />\n                                        </div>\n                                    </div>\n                                )))}\n                            </div>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}